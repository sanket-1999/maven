package exam;

import java.lang.annotation.Retention;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.TreeSet;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class Threading implements Runnable {

	Thread t1, t2;

	Threading() {
		t1 = new Thread(this);
		t2 = new Thread(this);
		t1.setName("produce");
		t2.setName("consume");
		t1.start();
		t2.start();
	}

	public static CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<Integer>();

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new Threading();
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		ReentrantLock lock = new ReentrantLock();
		Condition c = lock.newCondition();
		Thread currentthread = Thread.currentThread();
		if (currentthread.getName().equals("produce")) {
			if(t2.isAlive())
			{
				try {
					t2.sleep(100);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			lock.lock();
			try {
				Random rs = new Random();
				
				for (int j = 0; ; j++) {
					int i = rs.nextInt(400);
					list.add(i);

				}

			} finally {
				lock.unlock();
			}
			
			

		}

		else if (currentthread.getName().equals("consume")) {
			if (lock.isLocked() == false) {
				try {
					t2.sleep(500);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			for (int i = 0; i < list.size(); i++) {
				System.out.println(list.get(i));
			
			}
			System.out.println("prining from conusumer over.. waiting fro producer");
			
		}

	}

}
